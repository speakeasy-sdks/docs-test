// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ApiextParameterComponent - Used to specify UI-only type modifiers
type ApiextParameterComponent string

const (
	ApiextParameterComponentUnknown   ApiextParameterComponent = ""
	ApiextParameterComponentEditorSQL ApiextParameterComponent = "editor-sql"
	ApiextParameterComponentTextarea  ApiextParameterComponent = "textarea"
)

func (e ApiextParameterComponent) ToPointer() *ApiextParameterComponent {
	return &e
}

func (e *ApiextParameterComponent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "editor-sql":
		fallthrough
	case "textarea":
		*e = ApiextParameterComponent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApiextParameterComponent: %v", v)
	}
}

// ApiextParameterType - Parameter data type.
type ApiextParameterType string

const (
	ApiextParameterTypeAny       ApiextParameterType = "any"
	ApiextParameterTypeString    ApiextParameterType = "string"
	ApiextParameterTypeBoolean   ApiextParameterType = "boolean"
	ApiextParameterTypeUpload    ApiextParameterType = "upload"
	ApiextParameterTypeInteger   ApiextParameterType = "integer"
	ApiextParameterTypeFloat     ApiextParameterType = "float"
	ApiextParameterTypeDate      ApiextParameterType = "date"
	ApiextParameterTypeDatetime  ApiextParameterType = "datetime"
	ApiextParameterTypeConfigvar ApiextParameterType = "configvar"
	ApiextParameterTypeList      ApiextParameterType = "list"
	ApiextParameterTypeMap       ApiextParameterType = "map"
	ApiextParameterTypeObject    ApiextParameterType = "object"
)

func (e ApiextParameterType) ToPointer() *ApiextParameterType {
	return &e
}

func (e *ApiextParameterType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "string":
		fallthrough
	case "boolean":
		fallthrough
	case "upload":
		fallthrough
	case "integer":
		fallthrough
	case "float":
		fallthrough
	case "date":
		fallthrough
	case "datetime":
		fallthrough
	case "configvar":
		fallthrough
	case "list":
		fallthrough
	case "map":
		fallthrough
	case "object":
		*e = ApiextParameterType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApiextParameterType: %v", v)
	}
}

type ApiextParameter struct {
	// Used to specify UI-only type modifiers
	Component   *ApiextParameterComponent `json:"component,omitempty"`
	Constraints *ApiextConstraints        `json:"constraints,omitempty"`
	// Optional default value for this parameter, used if not set.
	Default interface{} `json:"default,omitempty"`
	// Description for this parameter.
	Desc *string `json:"desc,omitempty"`
	// Name for this parameter.
	Name *string `json:"name,omitempty"`
	// If this parameter has an object data type, represents an ordered list of key-value pairs that can be included in this object.
	Params []ApiextParameter `json:"params,omitempty"`
	// A human-friendly identifier for the parameter that can be referenced inside a task or runbook.
	// Airplane automatically generates a slug when provided a parameter name.
	Slug *string `json:"slug,omitempty"`
	// Parameter data type.
	Type   *ApiextParameterType `json:"type,omitempty"`
	Values *ApiextParameter     `json:"values,omitempty"`
}
